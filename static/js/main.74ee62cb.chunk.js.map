{"version":3,"sources":["components/FileProcessing.js","components/WinList.js","components/LoseList.js","components/QCards.js","components/GamePlay.js","components/AppHeader.js","App.js","index.js"],"names":["a","dict","shuffleAnswers","array","temp","slice","i","length","j","Math","floor","random","console","log","ListItem","item","className","id","WinList","props","list","winList","Card","map","index","key","LoseList","loseList","QCards","answerClicked","word","answerPair","CardTitle","CardSubtitle","CardText","answer","value","onClick","WinLose","GamePlay","state","dictionary","isLoaded","answers","rnd","prevWord","prevAnswer","nextWord","nextAnswer","rndAnswer","bind","this","loadUpDictionary","prevProps","prevState","loadDictionary","then","d","setState","RandomNumber","rnd2","Entries","Word","Definition","rndWord","AnswersArray","AnswersPairArray","NewGame","disabled","Component","AppHeader","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","App","basename","exact","path","component","gamePlay","appHeader","qCards","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74ee62cb.chunk.js","sourcesContent":["// import React, { Component } from \"react\";\r\nimport dict from \"../Assets/OxfordJson.json\";\r\n\r\nexport async function loadDictionary() {\r\n  return await dict; //JSON.parse(dict);\r\n}\r\n\r\nexport function RandomNumber() {\r\n  const min = 1;\r\n  const max = dict.length;\r\n  return min + Math.random() * (max - min);\r\n}\r\n//this doesn't work????\r\nexport function shuffleAnswers(array) {\r\n  let temp = array.slice();\r\n  for (let i = temp.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [temp[i], temp[j]] = [temp[j], temp[i]];\r\n    console.log(\"shuffleanswers \" + temp[i]);\r\n  }\r\n  return temp;\r\n}\r\n","import React from \"react\";\r\nimport { Card, CardText, CardTitle, CardSubtitle } from \"reactstrap\";\r\n//import { ListItem } from \"@material-ui/core\";\r\n\r\n//https://www.robinwieruch.de/react-list-component\r\n\r\nconst ListItem = ({ item }) => (\r\n  <li className=\"list-group-item list-group-item-primary\">\r\n    <div>\r\n      {item.id} {item}\r\n    </div>\r\n  </li>\r\n);\r\n\r\nconst WinList = props => {\r\n  const list = props.winList;\r\n  return (\r\n    <div className=\"list-group \">\r\n      <Card className=\"cardBodyWinLose\">\r\n        <h5>You have won... {list.length} times</h5>\r\n        {list.map((item, index) => {\r\n          return (\r\n            <ul className=\"list-group list-group-flush\">\r\n              <ListItem key={index} item={item} />\r\n            </ul>\r\n          );\r\n        })}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WinList;\r\n","import React from \"react\";\r\nimport { Card, CardText, CardTitle, CardSubtitle } from \"reactstrap\";\r\n//import { ListItem } from \"@material-ui/core\";\r\n\r\n//https://www.robinwieruch.de/react-list-component\r\n\r\nconst ListItem = ({ item }) => (\r\n  <li className=\"list-group-item list-group-item-primary\">\r\n    <div>\r\n      {item.id} {item}\r\n    </div>\r\n  </li>\r\n);\r\n\r\nconst LoseList = props => {\r\n  const list = props.loseList;\r\n  return (\r\n    <div className=\"list-group\">\r\n      <Card className=\"cardBodyWinLose\">\r\n        <h5>You have lost ... {list.length} times</h5>\r\n        {list.map((item, index) => {\r\n          return (\r\n            <ul className=\"list-group list-group-flush\">\r\n              <ListItem key={item.id} item={item} />\r\n            </ul>\r\n          );\r\n        })}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoseList;\r\n","import React from \"react\";\r\nimport { Card, CardText, CardTitle, CardSubtitle } from \"reactstrap\";\r\n\r\nconst QCards = props => {\r\n  const answerClicked = props.answerClicked;\r\n  const word = props.word;\r\n  return (\r\n    props.answerPair.map((a, index) => (\r\n      <div className=\"col col-12 col-sm-4 col-md-3 \" key={index}>\r\n        <Card className=\"cardBody\">\r\n          <CardTitle className=\"conditions \">\r\n            {!answerClicked ? word : a.word}\r\n          </CardTitle>\r\n          {answerClicked ? (\r\n            <CardSubtitle className=\"cardSubtitle\">\r\n              {\" \"}\r\n              {a.word === word ? \"Correct!\" : \"Incorrect\"}\r\n            </CardSubtitle>\r\n          ) : (\r\n              \" \"\r\n            )}\r\n          <CardText>{a.answer}</CardText>\r\n\r\n          <button\r\n            className=\"buttonSubmit btn btn-primary\"\r\n            value={a}\r\n            key={index}\r\n            onClick={() => this.WinLose(a)}\r\n          >\r\n            {!answerClicked ? \"Choose Definition\" : a.word}\r\n          </button>\r\n        </Card>\r\n      </div>\r\n    ))\r\n    \r\n  );\r\n};\r\n\r\nexport default QCards;\r\n","import React, { Component } from \"react\";\r\nimport { loadDictionary, shuffleAnswers } from \"./FileProcessing\";\r\nimport { Card, CardText, CardTitle, CardSubtitle } from \"reactstrap\";\r\nimport WinList from \"./WinList\";\r\nimport LoseList from \"./LoseList\";\r\nimport QCards from \"./QCards\";\r\n\r\n//keep this for async ideas with state\r\n//https://stackoverflow.com/questions/58794712/how-to-i-make-setstate-run-synchronously-in-reactjs/58795004#58795004\r\n\r\nclass GamePlay extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dictionary: [],\r\n      isLoaded: false,\r\n      answerClicked: false,\r\n      answers: [],\r\n      rnd: 0,\r\n      word: \"\",\r\n      answer: \"\",\r\n      answerPair: [],\r\n      prevWord: \"\",\r\n      prevAnswer: \"\",\r\n      nextWord: \"\",\r\n      nextAnswer: \"\",\r\n      rndAnswer: \"\",\r\n      winList: [],\r\n      loseList: []\r\n      //  isExpanded:false\r\n    };\r\n    this.WinLose = this.WinLose.bind(this);\r\n  }\r\n\r\n  //  \"Word\": \"Aardvark\",\r\n  //     \"Definition\": \"n. Mammal with a tubular snout and a long tongue, feeding on termites. [afrikaans]\"\r\n\r\n  componentDidMount() {\r\n    this.loadUpDictionary();\r\n    //this.DictionaryLength();\r\n    //this.RandomNumber();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.dictionary !== prevState.dictionary) {\r\n    }\r\n  }\r\n  //The idea is that let the this.loadUpDictionary and this.setState run first, and since setState allows to have callback, you can have this.DictionaryLength() to do just that https://medium.learnreact.com/setstate-takes-a-callback-1f71ad5d2296\r\n  loadUpDictionary() {\r\n    loadDictionary().then(d => {\r\n      this.setState(\r\n        () => ({\r\n          dictionary: d,\r\n          isLoaded: true,\r\n          answerClicked: false\r\n        }),\r\n        () => {\r\n          this.RandomNumber();\r\n        }\r\n      );\r\n      //  console.log(this.state.dictionary);\r\n    });\r\n  }\r\n\r\n  NewGame() {\r\n    this.setState({ answerClicked: false });\r\n    this.RandomNumber();\r\n    console.log(\"rnd \" + this.state.rnd);\r\n  }\r\n\r\n  RandomNumber() {\r\n    const min = 0 + 5; //5 is to stop out of bound errors\r\n    const max = 26731 - 5;\r\n    const rnd = Math.floor(Math.random() * (max - min + 1) + min);\r\n    const rnd2 = Math.floor(Math.random() * (max - min + 1) + min);\r\n\r\n    const word = this.state.dictionary.Entries[rnd].Word;\r\n    const answer = this.state.dictionary.Entries[rnd].Definition;\r\n    const prevWord = this.state.dictionary.Entries[rnd - 1].Word;\r\n    const prevAnswer = this.state.dictionary.Entries[rnd - 1].Definition;\r\n    const nextWord = this.state.dictionary.Entries[rnd + 1].Word;\r\n    const nextAnswer = this.state.dictionary.Entries[rnd + 1].Definition;\r\n    const next2Word = this.state.dictionary.Entries[rnd + 2].Word;\r\n    const next2Answer = this.state.dictionary.Entries[rnd + 2].Definition;\r\n\r\n    const rndWord = this.state.dictionary.Entries[rnd2].Word;\r\n    const rndAnswer = this.state.dictionary.Entries[rnd2].Definition;\r\n\r\n    const AnswersArray = [answer, prevAnswer, nextAnswer, rndAnswer];\r\n\r\n    let q = { word: word, answer: answer };\r\n    let pq = { word: prevWord, answer: prevAnswer };\r\n    let nq = { word: nextWord, answer: nextAnswer };\r\n    let rq = { word: rndWord, answer: rndAnswer };\r\n    let n2q = { word: next2Word, answer: next2Answer }; //not used\r\n    const AnswersPairArray = [q, pq, nq, rq];\r\n\r\n    this.setState(\r\n      () => ({\r\n        rnd: rnd,\r\n        word: word,\r\n        answer: answer,\r\n        prevWord: this.state.dictionary.Entries[rnd - 1].Word,\r\n        prevAnswer: this.state.dictionary.Entries[rnd - 1].Definition,\r\n        nextWord: this.state.dictionary.Entries[rnd + 1].Word,\r\n        nextAnswer: this.state.dictionary.Entries[rnd + 1].Definition,\r\n        rndAnswer: this.state.dictionary.Entries[rnd2].Definition,\r\n        answers: AnswersArray,\r\n        answerPair: shuffleAnswers(AnswersPairArray)\r\n      }),\r\n      () => {\r\n        //  console.log(\"answers[0] =  \" + this.state.answers[0]);\r\n        //  this.shuffleAnswers();\r\n        //   this.setState({ answers: shuffleAnswers(this.state.answers) });\r\n        //  this.shuffleAnswerPair();\r\n      }\r\n    );\r\n  }\r\n\r\n  WinLose(a) {\r\n    this.setState({ answerClicked: true });\r\n\r\n    if (a.answer === this.state.answer) {\r\n      // alert(\"Correct\");\r\n\r\n      this.setState(state => {\r\n        const winList = [...state.winList, state.word]; //spread it, add in word\r\n        return {\r\n          winList //send back new list\r\n        };\r\n      });\r\n\r\n      console.log(\" Win \" + this.state.answer);\r\n    } else {\r\n      console.log(\"Lose \" + this.state.answer);\r\n\r\n      this.setState(state => {\r\n        const loseList = [...state.loseList, state.word]; //spread it, add in word\r\n        return {\r\n          loseList //send back new list\r\n        };\r\n      });\r\n\r\n      //  alert(\"Wrong the answer to your definition is \" + this.state.answer);\r\n    }\r\n\r\n    //   this.state.winList.map(i => console.log(\"winList \" + i.text));\r\n\r\n    //this.NewGame();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isLoaded,\r\n      dictionary,\r\n      rnd,\r\n      word,\r\n      nextWord,\r\n      prevWord,\r\n      rndAnswer,\r\n      answers,\r\n      answerPair,\r\n      answerClicked\r\n    } = this.state; //pass across the state\r\n\r\n    if (!isLoaded) {\r\n      return <div>Loading ....</div>;\r\n    } else {\r\n      return (\r\n        <div className=\"container-fluid  justify-content-md-center\">\r\n          <div className=\"row  justify-content-md-center\">\r\n            <div className=\"col  col-sm-auto\">\r\n              <button\r\n                className=\"button btn btn-success btn-lg\"\r\n                onClick={() => this.NewGame()}\r\n                // disabled={answerClicked}\r\n              >\r\n                {\"Play - \" + word}\r\n              </button>\r\n\r\n              <div className=\"row\">\r\n                {/* <QCards answerPair={answerPair} answerClicked={answerClicked}\r\n                  word={word}/> */}\r\n                {answerPair.map((a, index) => (\r\n                  <div className=\"col col-12 col-sm-4 col-md-3 \" key={index}>\r\n                    <Card className=\"cardBody\">\r\n                      <CardTitle className=\"conditions \">\r\n                        {!answerClicked ? word : a.word}\r\n                      </CardTitle>\r\n                      {answerClicked ? (\r\n                        <CardSubtitle className=\"cardSubtitle\">\r\n                          {\" \"}\r\n                          {a.word === word ? \"Correct!\" : \"Incorrect\"}\r\n                        </CardSubtitle>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <CardText>{a.answer}</CardText>\r\n\r\n                      <button\r\n                        className=\"buttonSubmit btn btn-primary\"\r\n                        value={a}\r\n                        key={index}\r\n                        onClick={() => this.WinLose(a)}\r\n                        disabled={answerClicked}\r\n                      >\r\n                        {!answerClicked ? \"Choose Definition\"  : a.word}\r\n                      </button>\r\n                    </Card>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              <div className=\"row  justify-content-md-center\">\r\n                <div className=\"col-md-auto\">\r\n                  <WinList winList={this.state.winList} />\r\n                </div>\r\n                <div className=\"col-md-auto\">\r\n                  <LoseList loseList={this.state.loseList} />\r\n                </div>\r\n              </div>\r\n              <p></p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default GamePlay;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\n//https://reactstrap.github.io/components/navbar/\r\nconst AppHeader = props => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div className=\"container-fluid  justify-content-md-center App-header \">\r\n      <Navbar color=\"rgb(169, 185, 124)\" light expand=\"sm\">\r\n        <NavbarBrand\r\n          className=\"NavbarBrand\"\r\n          href=\"https://visioncollege.ac.nz/\"\r\n        >\r\n          Guess The Definition\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"https://visioncollege.ac.nz/study/information-technology/\">\r\n                Information Technology Courses\r\n              </NavLink>\r\n            </NavItem>\r\n            {\r\n              <NavItem>\r\n                <NavLink href=\"https://visioncollege.ac.nz/\">\r\n                  Vision College Home\r\n                </NavLink>\r\n              </NavItem>\r\n            }\r\n            {/* <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Options\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>Option 1</DropdownItem>\r\n                <DropdownItem>Option 2</DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Reset</DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown> */}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport gamePlay from \"./components/GamePlay\";\nimport winList from \"./components/WinList\";\nimport loseList from \"./components/LoseList\";\nimport qCards from \"./components/QCards\"\nimport appHeader from \"./components/AppHeader\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n//https://levelup.gitconnected.com/deploying-a-create-react-app-with-routing-to-github-pages-f386b6ce84c2\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"container-fluid\">\n        <Switch>\n          <Route exact path=\"/\" component={gamePlay} />\n          <Route component={winList} />\n          <Route component={loseList} />\n          <Route component={appHeader} />\n          <Route component={qCards} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport AppHeader from \"./components/AppHeader\";\n\nReactDOM.render(\n  <Router>\n    <AppHeader />\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}