{"version":3,"sources":["components/FileProcessing.js","components/WinList.js","components/LoseList.js","components/QCards.js","components/GamePlay.js","components/AppHeader.js","components/WinLose.js","App.js","index.js"],"names":["a","dict","GenerateRND","rnd","Math","floor","random","console","log","shuffleAnswers","array","temp","slice","i","length","j","GenerateGameWords","loseList","dictionary","rnd2","loseWord","Entries","findIndex","entry","Word","word","answer","Definition","prevWord","prevAnswer","nextWord","nextAnswer","ListItem","item","className","id","WinList","props","list","winList","Card","map","index","key","LoseList","QCards","state","answerPair","answerClicked","chosenWord","prevProps","this","setState","event","CardTitle","CardSubtitle","CardText","value","onClick","buttonClick","bind","disabled","Component","GamePlay","isLoaded","answers","rndAnswer","WinLose","RetestLoseWords","loadUpDictionary","prevState","loadDictionary","then","d","WordGeneration","generatedArray","result","filter","NewGame","AppHeader","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","App","basename","exact","path","component","gamePlay","appHeader","qCards","winLose","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fa31b1c.chunk.js","sourcesContent":["// import React, { Component } from \"react\";\r\nimport dict from \"../Assets/OxfordJson.json\";\r\n\r\nexport async function loadDictionary() {\r\n  return await dict; //JSON.parse(dict);\r\n}\r\n\r\nexport function GenerateRND() {\r\n  const min = 0 + 5; //5 is to stop out of bound errors\r\n  const max = 26731 - 5; //26731\r\n  const rnd = Math.floor(Math.random() * (max - min + 1) + min);\r\n  console.log(\"rnd \" + rnd);\r\n  return rnd;\r\n}\r\n\r\nexport function GenerateRNDLose(loselist) {\r\n  const min = 0; //5 is to stop out of bound errors\r\n  const max = loselist.length - 1; //26731\r\n  const rnd = Math.floor(Math.random() * (max - min + 1) + min);\r\n  console.log(\"rnd \" + rnd);\r\n  return rnd;\r\n}\r\n\r\nexport function shuffleAnswers(array) {\r\n  let temp = array.slice();\r\n  for (let i = temp.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [temp[i], temp[j]] = [temp[j], temp[i]];\r\n   // console.log(\"shuffleanswers \" + temp[i]);\r\n  }\r\n  return temp;\r\n}\r\n\r\nexport function GenerateGameWords(loseList, dictionary) {\r\n  var rnd = 0;\r\n  var rnd2 = 0;\r\n  if (loseList.length !== 0) {\r\n  //  rnd = GenerateRNDLose(loseList); //get a random number from the loselist\r\n    rnd = 0; // just get the first word from the list as its hard to get a random return\r\n    \r\n    var loseWord = loseList[0]; //get the first word from that list need to start with 1\r\n    rnd = dictionary.Entries.findIndex(entry => entry.Word === loseWord); //match it with the word in the dict and generate the Index to get the rest of the words\r\n\r\nconsole.log(\"RND FOR  LOSELIST \" + rnd)\r\n\r\n//version 1 Get the fist word on the list and test that. Remove it from the list. If person gets it wrong again it will be auto added into the end. V2 get a random word from the list\r\n\r\n  } else {\r\n    rnd = GenerateRND();\r\n  }\r\n  rnd2 = GenerateRND(); //generate random word\r\n\r\n  //this could be combined with below, but its clear.  \r\n  const word = dictionary.Entries[rnd].Word;\r\n  const answer = dictionary.Entries[rnd].Definition;\r\n  const prevWord = dictionary.Entries[rnd - 1].Word;\r\n  const prevAnswer = dictionary.Entries[rnd - 1].Definition;\r\n  const nextWord = dictionary.Entries[rnd + 1].Word;\r\n  const nextAnswer = dictionary.Entries[rnd + 1].Definition;\r\n  const next2Word = dictionary.Entries[rnd + 2].Word;\r\n  const next2Answer = dictionary.Entries[rnd + 2].Definition;\r\n\r\n  const rndWord = dictionary.Entries[rnd2].Word;\r\n  const rndAnswer = dictionary.Entries[rnd2].Definition;\r\n\r\n  // const AnswersArray = [answer, prevAnswer, nextAnswer, rndAnswer];\r\n\r\n  //multisized entries, not just 4\r\n  let q = {\r\n    word: word,\r\n    answer: answer\r\n  };\r\n  \r\n  let pq = {\r\n    word: prevWord,\r\n    answer: prevAnswer\r\n  };\r\n    let nq = {\r\n    word: nextWord,\r\n    answer: nextAnswer\r\n  };\r\n  let rq = {\r\n    word: rndWord,\r\n    answer: rndAnswer\r\n  };\r\n  let n2q = {\r\n    word: next2Word,\r\n    answer: next2Answer\r\n  }; //not used\r\n  const AnswersPairArray = [q, pq, nq, rq];\r\n  return AnswersPairArray;\r\n\r\n  //const result = shuffleAnswers(AnswersPairArray);\r\n\r\n//  return result;\r\n}\r\n\r\n\r\n\r\n//old code\r\n\r\n// WordGeneration() {\r\n//     //  const rnd = GenerateRND(); //Math.floor(Math.random() * (max - min + 1) + min);\r\n//     // const rnd2 = GenerateRND();\r\n\r\n//     // const word = this.state.dictionary.Entries[rnd].Word;\r\n//     // const answer = this.state.dictionary.Entries[rnd].Definition;\r\n//     // const prevWord = this.state.dictionary.Entries[rnd - 1].Word;\r\n//     // const prevAnswer = this.state.dictionary.Entries[rnd - 1].Definition;\r\n//     // const nextWord = this.state.dictionary.Entries[rnd + 1].Word;\r\n//     // const nextAnswer = this.state.dictionary.Entries[rnd + 1].Definition;\r\n//     // const next2Word = this.state.dictionary.Entries[rnd + 2].Word;\r\n//     // const next2Answer = this.state.dictionary.Entries[rnd + 2].Definition;\r\n\r\n//     // const rndWord = this.state.dictionary.Entries[rnd2].Word;\r\n//     // const rndAnswer = this.state.dictionary.Entries[rnd2].Definition;\r\n\r\n//   //  const AnswersArray = [answer, prevAnswer, nextAnswer, rndAnswer];\r\n// //multisized entries, not just 4\r\n//     // let q = { word: word, answer: answer };\r\n//     // let pq = { word: prevWord, answer: prevAnswer };\r\n//     // let nq = { word: nextWord, answer: nextAnswer };\r\n//     // let rq = { word: rndWord, answer: rndAnswer };\r\n//     // let n2q = { word: next2Word, answer: next2Answer }; //not used\r\n//     // const AnswersPairArray = [q, pq, nq, rq];\r\n//     const generatedArray = GenerateGameWords(\"\", this.state.dictionary);\r\n//     this.setState(\r\n//       () => ({\r\n//         //   rnd: rnd,\r\n//         word: generatedArray[0].Word,\r\n//         answer: generatedArray[0].Definition,\r\n//         // prevWord: this.state.dictionary.Entries[rnd - 1].Word,\r\n//         // prevAnswer: this.state.dictionary.Entries[rnd - 1].Definition,\r\n//         // nextWord: this.state.dictionary.Entries[rnd + 1].Word,\r\n//         // nextAnswer: this.state.dictionary.Entries[rnd + 1].Definition,\r\n//         // rndAnswer: this.state.dictionary.Entries[rnd2].Definition,\r\n//         //answers: AnswersArray,\r\n//         answerPair: generatedArray //  shuffleAnswers(AnswersPairArray)\r\n//       }),\r\n//       () => {\r\n//         //  console.log(\"answers[0] =  \" + this.state.answers[0]);\r\n//         //  this.shuffleAnswers();\r\n//         //   this.setState({ answers: shuffleAnswers(this.state.answers) });\r\n//         //  this.shuffleAnswerPair();\r\n//       }\r\n//     );\r\n//   }\r\n","import React from \"react\";\r\nimport { Card, CardText, CardTitle, CardSubtitle } from \"reactstrap\";\r\n//import { ListItem } from \"@material-ui/core\";\r\n\r\n//https://www.robinwieruch.de/react-list-component\r\n\r\nconst ListItem = ({ item }) => (\r\n  <li className=\"list-group-item list-group-item-primary\">\r\n    <div>\r\n      {item.id} {item}\r\n    </div>\r\n  </li>\r\n);\r\n\r\nconst WinList = props => {\r\n  const list = props.winList;\r\n  return (\r\n    <div className=\"list-group \">\r\n      <Card className=\"cardBodyWinLose\">\r\n        <h5>You have won... {list.length} times</h5>\r\n        {list.map((item, index) => {\r\n          return (\r\n            <ul className=\"list-group list-group-flush\">\r\n              <ListItem key={index} item={item} />\r\n            </ul>\r\n          );\r\n        })}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WinList;\r\n","import React from \"react\";\r\nimport { Card, CardText, CardTitle, CardSubtitle } from \"reactstrap\";\r\n//import { ListItem } from \"@material-ui/core\";\r\n\r\n//https://www.robinwieruch.de/react-list-component\r\n\r\nconst ListItem = ({ item }) =>\r\n  item ? (\r\n    <li className=\"list-group-item list-group-item-primary\">\r\n      <div>\r\n        {item.id} {item}\r\n      </div>\r\n    </li>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\nconst LoseList = props => {\r\n  const list = props.loseList;\r\n  return (\r\n    <div className=\"list-group\">\r\n      <Card className=\"cardBodyWinLose\">\r\n        <h5>You have lost ... {list.length } times</h5>\r\n        {list.map((item, index) => {\r\n          return (\r\n            <ul className=\"list-group list-group-flush\">\r\n              <ListItem key={item.id} item={item} />\r\n            </ul>\r\n          );\r\n        })}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoseList;\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardText, CardTitle, CardSubtitle } from \"reactstrap\";\r\nimport WinList from \"./WinList\";\r\nimport LoseList from \"./LoseList\";\r\n\r\nclass QCards extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      answerPair: this.props.answerPair,\r\n      answerClicked: this.props.answerClicked,\r\n      word: this.props.word,\r\n      chosenWord: \"\"\r\n    };\r\n  }\r\n  // componentDidMount() {\r\n  //   this.setState({\r\n  //     answerClicked: false\r\n  //   });\r\n  // }\r\n\r\n  //forces the component to update when the props change\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.answerPair !== this.props.answerPair) {\r\n      this.setState({\r\n        answerClicked: !this.props.answerPair,\r\n        answerPair: this.props.answerPair,\r\n        word: this.props.word\r\n      });\r\n\r\n      // this.updateAndNotify();\r\n    }\r\n  }\r\n\r\n  buttonClick(event, a) {\r\n    this.setState({\r\n      answerClicked: true,\r\n      chosenWord: a\r\n    });\r\n    console.log(\"QCards word \" + a.word);\r\n  }\r\n\r\n \r\n\r\n  render() {\r\n    const { word, answerClicked, chosenWord } = this.state;\r\n    return (\r\n      <div className=\"row\">\r\n        {this.props.answerPair.map((a, index) => (\r\n          <div className=\"col col-12 col-sm-4 col-md-3 \" key={index}>\r\n            <Card className=\"cardBody\">\r\n              <CardTitle className=\"conditions \">\r\n                {!answerClicked ? word : a.word}\r\n              </CardTitle>\r\n              {answerClicked ? (\r\n                <CardSubtitle className=\"cardSubtitle\">\r\n                  {a.word === word ? \"Correct!\" : \"Incorrect\"}\r\n                </CardSubtitle>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <CardText>{a.answer}</CardText>\r\n              <button\r\n                className=\"buttonSubmit btn btn-primary\"\r\n                value={a}\r\n                key={index}\r\n                onClick={this.buttonClick.bind(this, a.word)}\r\n                disabled={answerClicked}\r\n              >\r\n                {!answerClicked ? \"Choose Definition\" : a.word}\r\n              </button>\r\n            </Card>\r\n          </div>\r\n        ))}\r\n        <div className=\"row  justify-content-md-center\">\r\n          <div className=\"col-md-auto\">\r\n            <WinList winList={this.props.winList} />\r\n          </div>\r\n          <div className=\"col-md-auto\">\r\n            <LoseList loseList={this.props.loseList} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default QCards;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  GenerateGameWords,\r\n  GenerateRND,\r\n  loadDictionary,\r\n  shuffleAnswers,\r\n  GenerateRNDLose\r\n} from \"./FileProcessing\";\r\nimport { Card, CardText, CardTitle, CardSubtitle } from \"reactstrap\";\r\nimport WinList from \"./WinList\";\r\nimport LoseList from \"./LoseList\";\r\nimport QCards from \"./QCards\";\r\n\r\n//keep this for async ideas with state\r\n//https://stackoverflow.com/questions/58794712/how-to-i-make-setstate-run-synchronously-in-reactjs/58795004#58795004\r\n\r\nclass GamePlay extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dictionary: [],\r\n      isLoaded: false,\r\n      answerClicked: false,\r\n      answers: [],\r\n      rnd: 0,\r\n      word: \"\",\r\n      answer: \"\",\r\n      answerPair: [],\r\n      prevWord: \"\",\r\n      prevAnswer: \"\",\r\n      nextWord: \"\",\r\n      nextAnswer: \"\",\r\n      rndAnswer: \"\",\r\n      winList: [],\r\n     loseList: [],\r\n     // loseList: [\r\n      //   {\r\n      //     word: \"\",\r\n      //     answer: \"\"\r\n      //   }\r\n      // ]\r\n\r\n      //  isExpanded:false\r\n    };\r\n    this.WinLose = this.WinLose.bind(this);\r\n    this.RetestLoseWords = this.RetestLoseWords.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadUpDictionary();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.dictionary !== prevState.dictionary) {\r\n    }\r\n  }\r\n  //The idea is that let the this.loadUpDictionary and this.setState run first, and since setState allows to have callback, you can have this.DictionaryLength() to do just that https://medium.learnreact.com/setstate-takes-a-callback-1f71ad5d2296\r\n  loadUpDictionary() {\r\n    loadDictionary().then(d => {\r\n      this.setState(\r\n        () => ({\r\n          dictionary: d,\r\n          isLoaded: true,\r\n          answerClicked: false\r\n        }),\r\n        () => {\r\n          this.WordGeneration(); //run when completed above\r\n        }\r\n      );\r\n      //  console.log(this.state.dictionary);\r\n    });\r\n  }\r\n\r\n  NewGame() {\r\n    this.setState({ answerClicked: false });\r\n    this.WordGeneration();\r\n    //  console.log(\"rnd \" + this.state.rnd);\r\n  }\r\n\r\n  WordGeneration() {\r\n    const generatedArray = GenerateGameWords(\"\", this.state.dictionary);\r\n    //console.log(\"word \" + generatedArray[0].word);\r\n    //   console.log(\"defn \" + generatedArray[0].answer);\r\n\r\n    //need to get the word out before shuffling - we can't find it otherwise\r\n    const result = shuffleAnswers(generatedArray);\r\n    this.setState(\r\n      () => ({\r\n        word: generatedArray[0].word,\r\n        answer: generatedArray[0].answer,\r\n        answerPair: result //  shuffleAnswers(AnswersPairArray)\r\n      }),\r\n      () => {\r\n        //run stuff after saving\r\n      }\r\n    );\r\n  }\r\n\r\n  WinLose(a) {\r\n    this.setState({ answerClicked: true });\r\n\r\n    if (a.answer === this.state.answer) {\r\n      this.setState(state => {\r\n        const winList = [...state.winList, state.word]; //spread it, add in word\r\n        return {\r\n          //this return means to return a new winlist to the state, not return from winlose\r\n          winList //send back new list\r\n        };\r\n      });\r\n\r\n //     console.log(\" Win \" + this.state.answer);\r\n    } else {\r\n //     console.log(\"Lose \" + this.state.word + \"   \" + this.state.answer);\r\n      var loseEntry = { word: this.state.word, answer: this.state.answer };\r\n\r\n      this.setState(state => {\r\n        const loseList = [...state.loseList, this.state.word]; //spread it, add in word and answer\r\n        return {\r\n          loseList //send back new list\r\n        };\r\n      });\r\n      //  alert(\"Wrong the answer to your definition is \" + this.state.answer);\r\n    }\r\n  }\r\n\r\n  RetestLoseWords() {\r\n    // this.setState({ answerClicked: false });\r\n\r\n    const generatedArray = GenerateGameWords(\r\n      this.state.loseList,\r\n      this.state.dictionary\r\n    );\r\n    //need to get the word out before shuffling - we can't find it otherwise\r\n    const result = shuffleAnswers(generatedArray);\r\n\r\n    this.setState(\r\n      prevState => ({\r\n        loseList: prevState.loseList.filter(\r\n          word => word != generatedArray[0].word\r\n        ), //build a new list, from the prevstate with the word we are testing removed. Remove the word from the list\r\n        answerClicked: false,\r\n        word: generatedArray[0].word, //take the first word from the list\r\n        answer: generatedArray[0].answer, //take the first answer from the list\r\n        answerPair: result //  shuffleAnswers(AnswersPairArray)\r\n      }),\r\n      () => {\r\n        //run stuff after saving\r\n      }\r\n    );\r\n\r\n    //retested word is not at first position\r\n    // console.log(\"lose word \" + this.state.word);\r\n    // console.log(\"lose defn \" + this.state.answer);\r\n    // const { loseList } = this.state.loseList;\r\n\r\n    //  console.log(...loseList);\r\n  }\r\n\r\n  render() {\r\n    const { isLoaded, word, answerPair, answerClicked } = this.state; //pass across the state\r\n\r\n    if (!isLoaded) {\r\n      return <div>Loading ....</div>;\r\n    } else {\r\n      return (\r\n        <div className=\"container-fluid  justify-content-md-center\">\r\n          <div className=\"row  justify-content-md-center\">\r\n            <div className=\"col  col-sm-auto\">\r\n              <button\r\n                className=\"button btn btn-success btn-lg\"\r\n                onClick={() => this.NewGame()}\r\n                // disabled={answerClicked}\r\n              >\r\n                {\"Play - \" + word}\r\n              </button>\r\n\r\n              {/* <div className=\"row\">\r\n                {\r\n                  <QCards\r\n                    answerPair={answerPair}\r\n                    answerClicked={this.state.answerClicked}\r\n                    word={word}\r\n                    winList={this.state.winList}\r\n                    loseList={this.state.loseList}\r\n                  />\r\n                }\r\n              </div> */}\r\n              <div className=\"row\">\r\n                {answerPair.map((a, index) => (\r\n                  <div className=\"col col-12 col-sm-4 col-md-3 \" key={index}>\r\n                    <Card className=\"cardBody\">\r\n                      <CardTitle className=\"conditions \">\r\n                        {!answerClicked ? word : a.word}\r\n                      </CardTitle>\r\n                      {answerClicked ? (\r\n                        <CardSubtitle className=\"cardSubtitle\">\r\n                          {\" \"}\r\n                          {a.word === word ? \"Correct!\" : \"Incorrect\"}\r\n                        </CardSubtitle>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <CardText>{a.answer}</CardText>\r\n\r\n                      <button\r\n                        className=\"buttonSubmit btn btn-primary\"\r\n                        value={a}\r\n                        key={index}\r\n                        onClick={() => this.WinLose(a)}\r\n                        disabled={answerClicked}\r\n                      >\r\n                        {!answerClicked ? \"Choose Definition\" : a.word}\r\n                      </button>\r\n                    </Card>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              <div className=\"row  justify-content-md-center\">\r\n                <div className=\"col-md-auto\">\r\n                  <WinList winList={this.state.winList} />\r\n                </div>\r\n                <div className=\"col-md-auto\">\r\n                  <LoseList loseList={this.state.loseList} />\r\n                  <button\r\n                    className=\"buttonSubmit btn btn-primary\"\r\n                    onClick={() => this.RetestLoseWords()}\r\n                  >\r\n                    Retest\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <p></p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default GamePlay;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\n//https://reactstrap.github.io/components/navbar/\r\nconst AppHeader = props => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div className=\"container-fluid  justify-content-md-center App-header \">\r\n      <Navbar color=\"rgb(169, 185, 124)\" light expand=\"sm\">\r\n        <NavbarBrand\r\n          className=\"NavbarBrand\"\r\n          href=\"https://visioncollege.ac.nz/\"\r\n        >\r\n          Guess The Definition\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"https://visioncollege.ac.nz/study/information-technology/\">\r\n                Information Technology Courses\r\n              </NavLink>\r\n            </NavItem>\r\n            {\r\n              <NavItem>\r\n                <NavLink href=\"https://visioncollege.ac.nz/\">\r\n                  Vision College Home\r\n                </NavLink>\r\n              </NavItem>\r\n            }\r\n            {/* <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Options\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>Option 1</DropdownItem>\r\n                <DropdownItem>Option 2</DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Reset</DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown> */}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import React, { Component } from \"react\";\r\nimport WinList from \"./WinList\";\r\nimport LoseList from \"./LoseList\";\r\n\r\nclass WinLose extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      chosenWord: this.props.chosenWord,\r\n      word: this.props.word,\r\n      answer: this.props.answer,\r\n\r\n      winList: [],\r\n      loseList: []\r\n    };\r\n   // this.WinLose = this.WinLose.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.WinLose();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.word !== this.props.word) {\r\n      this.setState({\r\n        chosenWord: this.props.chosenWord,\r\n        word: this.props.word,\r\n        answer: this.props.answer\r\n      });\r\n\r\n      // this.updateAndNotify();\r\n    }\r\n  }\r\n\r\n  WinLose() {\r\n    this.setState({ answerClicked: true });\r\n\r\n    if (this.props.answer === this.props.word) {\r\n      // alert(\"Correct\");\r\n\r\n      this.setState(state => {\r\n        const winList = [...state.winList, this.props.word]; //spread it, add in word\r\n        return {\r\n          winList //send back new list\r\n        };\r\n      });\r\n\r\n      console.log(\" Win \" + this.state.answer);\r\n    } else {\r\n      console.log(\"Lose \" + this.state.answer);\r\n\r\n      this.setState(state => {\r\n        const loseList = [...state.loseList, this.props.word]; //spread it, add in word\r\n        return {\r\n          loseList //send back new list\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"col-md-auto\">\r\n          <WinList winList={this.state.winList} />\r\n        </div>\r\n        <div className=\"col-md-auto\">\r\n          <LoseList loseList={this.state.loseList} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default WinLose;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport gamePlay from \"./components/GamePlay\";\nimport winList from \"./components/WinList\";\nimport loseList from \"./components/LoseList\";\nimport qCards from \"./components/QCards\";\nimport appHeader from \"./components/AppHeader\";\nimport winLose from \"./components/WinLose\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n//https://levelup.gitconnected.com/deploying-a-create-react-app-with-routing-to-github-pages-f386b6ce84c2\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"container-fluid\">\n        <Switch>\n          <Route exact path=\"/\" component={gamePlay} />\n          <Route component={winList} />\n          <Route component={loseList} />\n          <Route component={appHeader} />\n          <Route component={qCards} />\n          <Route component={winLose} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport AppHeader from \"./components/AppHeader\";\n// import configureStore from \"./redux/configureStore\";\n// import { Provider as ReduxProvider } from \"react-redux\";\n\n// const store = configureStore(); // our app can access the redux store as its being wrapped in the provider component\n// <ReduxProvider store={store}> // </ReduxProvider>,\nReactDOM.render(\n  <Router>\n    <AppHeader />\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}